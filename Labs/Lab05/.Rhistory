novertime <- c(1:totalGenerations)
povertime <- c(1:totalGenerations)
for (t in 1:length(novertime)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
n <- c(1:totalGenerations)
p <- c(1:totalGenerations)
for (t in 1:length(n)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
for (t in 2:totalgeneration) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
print(n)
print(t)
print(p)
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1
timevector <- c(1:totalGenerations)
n <- c(1:totalGenerations)
p <- c(1:totalGenerations)
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
print(n)
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(t < 0) {
t = 0
}
}
n
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(t < threshold2) {
p[t] = 0, n[t] = 0
}
}
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(t < threshold2) {
p[t] = 0 n[t] = 0
}
}
n
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(t < threshold2) {
p[t] = 0 n[t] = 0
}
}
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(t < threshold2) {
p[t] = 0
n[t] = 0
}
}
n
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(t < threshold2) {
print(p[t] = 0)
print(n[t] = 0)
}
}
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(t < threshold2) {
print(p[t] = 0)
print(n[t] = 0)
}
}
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(t < threshold2) {
print(p[t] = 0)
print(n[t] = 0)
}
}
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(t < threshold2) {
print(p[t] = 0)
print(n[t] = 0)
}
}
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(t < threshold2) {
print(p[t] = 0)
n[t] = 0
}
}
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(t < threshold2) {
print(p[t] = 0)
n[t] = 0
}
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(t < threshold2) {
print(p[t] = 0)
n[t] = 0
}
}
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(t < threshold2) {
p[t] = 0
n[t] = 0
}
}
n
or (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(t < threshold2) {
p[t < threshold2] = 0
n[t < threshold2] = 0
}
}
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(t < threshold2) {
p[t < threshold2] = 0
n[t < threshold2] = 0
}
}
n
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(t < threshold2) {
p[p < threshold2] = 0
n[n < threshold2] = 0
}
}
n
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(t < threshold2) {
p[p < threshold2] <- 0
n[n < threshold2] <- 0
}
}
n
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(p[t] < threshold2) {
p[p < threshold2] <- 0
n[n < threshold2] <- 0
}
}
p
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(p[t] < threshold2 | n[t] < threshold2) {
p[p < threshold2] <- 0
n[n < threshold2] <- 0
}
}
print(n)
for (t in 1:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
print(n)
print(p)
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(p[t] < threshold2 | n[t] < threshold2) {
p[p < threshold2] <- 0
n[n < threshold2] <- 0
}
}
print(n)
print(p)
plot(totalGenerations, n)
length(total)
length(totalGenerations)
plot(timevector, n)
plot(timevector, n)
lines(timevector, p)
#Sixth, creating a matrix
myResuts <- matrix(data = NA, nrow = totalGenerations, ncol = totalGenerations, dimnames = c("TimeStep", "PreyAbundance", "PredatorAbundance"))
myResuts <- matrix(data = NA, nrow = totalGenerations, ncol = totalGenerations, dimnames = ("TimeStep", "PreyAbundance", "PredatorAbundance"))
myResuts <- matrix(data = NA, nrow = totalGenerations, ncol = totalGenerations, dimnames = "TimeStep", "PreyAbundance", "PredatorAbundance")
myResuts <- matrix(data = NA, nrow = totalGenerations, ncol = totalGenerations, dimnames = "TimeStep", "PreyAbundance", "PredatorAbundance")
#Sixth, creating a matrix
myResuts <- matrix(data = NA, nrow = totalGenerations, ncol = totalGeneration)
#Sixth, creating a matrix
myResuts <- matrix(data = NA, nrow = totalGenerations, ncol = totalGenerations)
colnames(myResults) <- c("TimeStep", "PreyAbundance", "PreadtorAbundance")
myResuts <- matrix(data = NA, nrow = totalGenerations, ncol = totalGenerations)
colnames(myResults) <- c("TimeStep", "PreyAbundance", "PreadtorAbundance")
myResuts
myResuts <- matrix(data = NA, nrow = totalGenerations, ncol = 3)
colnames(myResults) <- c("TimeStep", "PreyAbundance", "PreadtorAbundance")
#Sixth, creating a matrix
myResuts <- matrix(data = NA, nrow = totalGenerations, ncol = 3)
colnames(myResuts) <- c("TimeStep", "PreyAbundance", "PreadtorAbundance")
myResults["TimeStep"] <- totalGenerations
#Sixth, creating a matrix
myResults <- matrix(data = NA, nrow = totalGenerations, ncol = 3)
colnames(myResults) <- c("TimeStep", "PreyAbundance", "PreadtorAbundance")
myResults["TimeStep"] <- totalGenerations
myResults["PreyAbundance"] <- n
length(n)
myResults["PreyAbundance"] <- n
length(totalGenerations)
myResults["TimeStep"] <- timevector
myResults <- matrix(data = NA, nrow = length(timevector), ncol = 3)
colnames(myResults) <- c("TimeStep", "PreyAbundance", "PreadtorAbundance")
myResults["TimeStep"] <- timevector
myResults["PreyAbundance"] <- n
myResults["TimeStep", ] <- timevector
myResults["PreyAbundance", ] <- n
myResults["TimeStep", ] <- timevector
myResults[1, ] <- timevector
head(myResults)
colnames(myResults) <- c("TimeStep", "PreyAbundance", "PreadtorAbundance")
colnames(myResults) <- c("
colnames(myResults) <- c("TimeStep", "PreyAbundance", "PreadtorAbundance")
colnames(myResults) <- ("TimeStep", "PreyAbundance", "PreadtorAbundance")
columnnames <- c("TimeStep", "PreyAbundance", "PredatorAbundance")
colnames(myResults) <- columnnames
#Sixth, creating a matrix
myResults <- matrix(data = NA, nrow = timevector, ncol = 3)
columnnames <- c("TimeStep", "PreyAbundance", "PredatorAbundance")
colnames(myResults) <- columnnames
myResults[1, ] <- timevector
myResults["PreyAbundance", ] <- n
head(myResults)
length(myResults)
myResults
#Sixth, creating a matrix
myResults <- matrix(data = NA, nrow = totalGenerations, ncol = 3)
columnnames <- c("TimeStep", "PreyAbundance", "PredatorAbundance")
colnames(myResults) <- columnnames
length(myResults)
n[1] <- initPrey
p[1] <- initPred
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
print(n)
n <- c(1:totalGenerations)
p <- c(1:totalGenerations)
n[1] <- initPrey
p[1] <- initPred
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
print(n)
n[1] = initPrey
p[1] = initPred
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
print(n)
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1 		#
timevector <- c(1:totalGenerations)
n <- c(1:totalGenerations)
p <- c(1:totalGenerations)
n[1] = initPrey
p[1] = initPred
n
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
print(n)
for (t in 1:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
print(n)
p
p[1] = initPred
p
n <- c(1:totalGenerations)
p <- c(1:totalGenerations)
p[1] = initPred
p
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
print(n)
print(p)
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
print(n)
print(p)
p[1]
p[2]
n[1]
n[1]
initPrey <- 100 	# initial prey abundance at time t = 1
timevector <- c(1:totalGenerations)
n <- c(1:totalGenerations)
p <- c(1:totalGenerations)
n[1] = initPrey
p[1] = initPred
n
p
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
n[1]
p[1]
n[2]
p[3]
print(n)
plot(timevector, n)
lines(timevector, p)
or (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(p[t] < threshold2 | n[t] < threshold2) {
p[p < threshold2] <- 0
n[n < threshold2] <- 0
}
}
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(p[t] < threshold2 | n[t] < threshold2) {
p[p < threshold2] <- 0
n[n < threshold2] <- 0
}
}
print(p)
print(n)
plot(timevector, n)
lines(timevector, p)
myResults <- matrix(data = NA, nrow = totalGenerations, ncol = 3)
columnnames <- c("TimeStep", "PreyAbundance", "PredatorAbundance")
colnames(myResults) <- columnnames
length(myResults)
myResults[1, ] <- n
length(myResults[1, ])
length(myResults)
myResults
rownames(myResults) <- totalGenerations
rownames(myResults) <- timevector
for (row in 1:nrow(myResults)) {
prey <- n[row]
pred <- p[row]
time <- timevector[row]
myResults[time, prey] <- prey
myResults[time, pred] <- pred
myResults[time, timestep] <- time
}
for (row in 1:length(n)) {
myResults[time, prey] <- n
myResults[time, pred] <- p
myResults[time, timestep] <- overtime
}
for (row in 1:length(n)) {
myResults[1, ] <- n[row]
myResults[2, ] <- p[row]
myResults[3, ] <- overtime[row]
}
for (row in 1:length(n)) {
myResults[1, ] <- n[row]
myResults[2, ] <- p[row]
myResults[3, ] <- timevector[row]
}
myResults
for (row in 1:length(n)) {
myResults[2, ] <- n[row]
myResults[3, ] <- p[row]
myResults[1, ] <- timevector[row]
}
myResults
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1 		# conversion constant of prey into predators
timevector <- c(1:totalGenerations)
n <- c(1:totalGenerations)
p <- c(1:totalGenerations)
n[1] = initPrey
p[1] = initPred
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
print(n)
print(p)
for (t in 2:totalGenerations) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if(p[t] < threshold2 | n[t] < threshold2) {
p[p < threshold2] <- 0
n[n < threshold2] <- 0
}
}
print(p)
#Fifth step: creating a plot of abudances of prey and predators over time
plot(timevector, n)
print(n)
plot(timevector, n)
lines(timevector, p)
#Sixth, creating a matrix
myResults <- matrix(data = NA, nrow = totalGenerations, ncol = 3)
columnnames <- c("TimeStep", "PreyAbundance", "PredatorAbundance")
colnames(myResults) <- columnnames
rownames(myResults) <- timevector
or (row in 1:length(n)) {
myResults[2, ] <- n[row]
myResults[3, ] <- p[row]
myResults[1, ] <- timevector[row]
}
for (row in 1:length(n)) {
myResults[2, ] <- n[row]
myResults[3, ] <- p[row]
myResults[1, ] <- timevector[row]
}
myResults
print(myResults)
print(myResults)
for (i in 1:length(n)) {
myResults[2, ] <- n[i]
myResults[3, ] <- p[i]
myResults[1, ] <- timevector[i]
}
print(myResults)
n[]
class(n)
ncol(n)
ncol(myResults)
nrow(n)
nrow(myResults)
for (i in 1:totalGenerations) {
myResults[2, ] <- n[i]
myResults[3, ] <- p[i]
myResults[1, ] <- timevector[i]
}
print(myResults)
timevector
myResults[2, ]
myResults[2, ] <- n
myResults[2, ] <- n[1:1000]
nrow(myResults)
length(n)
myResults[ ,1]
myResults[ ,1] <- n
myResults[ ,1] <- timevector
myResults[ ,2] <- n
myResults[ ,3] <- p
print(myResults)
write.csv(x = myResults, file = "PredPreyResults.csv")
write.csv(x = myResults, file = "PredPreyResults.csv")
setwd("C:/Users/melin/Classes/EBIO-4420/CompBioLabsAndHW/Labs/Lab05")
